class Solution:
    def solveSudoku(self, board: list[list[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def is_valid(row: int, col: int, num: str) -> bool:
            # Check if 'num' is not in the current row
            for j in range(9):
                if board[row][j] == num:
                    return False
            # Check if 'num' is not in the current column
            for i in range(9):
                if board[i][col] == num:
                    return False
            # Check if 'num' is not in the current 3x3 box
            start_row, start_col = 3 * (row // 3), 3 * (col // 3)
            for i in range(start_row, start_row + 3):
                for j in range(start_col, start_col + 3):
                    if board[i][j] == num:
                        return False
            return True

        def solve() -> bool:
            for i in range(9):
                for j in range(9):
                    if board[i][j] == '.':
                        for num in map(str, range(1, 10)):
                            if is_valid(i, j, num):
                                board[i][j] = num  # Place the number
                                if solve():  # Recursively try to solve the rest
                                    return True
                                board[i][j] = '.'  # Backtrack
                        return False  # Trigger backtracking if no number is valid
            return True  # Puzzle solved

        solve()

# Example usage:
solution = Solution()
board = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]
solution.solveSudoku(board)
for row in board:
    print(row)
