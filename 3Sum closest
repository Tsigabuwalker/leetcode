class Solution:
    def threeSumClosest(self, nums: list[int], target: int) -> int:
        nums.sort()  # Sort the array
        closest_sum = float('inf')  # Initialize closest sum as infinity
        n = len(nums)
        
        for i in range(n - 2):  # Loop through each number
            left, right = i + 1, n - 1
            
            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]
                
                # Check if the current sum is closer to the target
                if abs(current_sum - target) < abs(closest_sum - target):
                    closest_sum = current_sum
                
                # Move pointers based on comparison with target
                if current_sum < target:
                    left += 1  # Increase sum by moving left pointer to the right
                elif current_sum > target:
                    right -= 1  # Decrease sum by moving right pointer to the left
                else:
                    return current_sum  # Exact match found
        
        return closest_sum  # Return the closest sum found

# Example usage:
solution = Solution()
print(solution.threeSumClosest([-1, 2, 1, -4], 1))  # Output: 2
print(solution.threeSumClosest([0, 0, 0], 1))        # Output: 0
