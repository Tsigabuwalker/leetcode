class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        # Handle overflow case
        if dividend == -2**31 and divisor == -1:
            return 2**31 - 1  # Return the max value for 32-bit signed integer

        # Determine the sign of the result
        negative = (dividend < 0) ^ (divisor < 0)

        # Work with absolute values
        abs_dividend = abs(dividend)
        abs_divisor = abs(divisor)

        quotient = 0

        # Subtract divisor from dividend using bit manipulation for efficiency
        while abs_dividend >= abs_divisor:
            temp, multiple = abs_divisor, 1
            # Double the divisor until it exceeds the dividend
            while abs_dividend >= (temp << 1):
                temp <<= 1
                multiple <<= 1
            abs_dividend -= temp
            quotient += multiple

        # Apply the sign to the quotient
        if negative:
            quotient = -quotient

        # Ensure the result is within the 32-bit signed integer range
        return max(min(quotient, 2**31 - 1), -2**31)

# Example usage
solution = Solution()
print(solution.divide(10, 3))   # Output: 3
print(solution.divide(7, -3))   # Output: -2
print(solution.divide(-8, -2))  # Output: 4
print(solution.divide(-8, 2))   # Output: -4
print(solution.divide(1, 1))    # Output: 1
