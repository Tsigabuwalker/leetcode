class Solution:
    def countAndSay(self, n: int) -> str:
        if n == 1:
            return "1"
        
        # Get the previous term
        previous_term = self.countAndSay(n - 1)
        
        result = []
        count = 1
        length = len(previous_term)
        
        # Iterate through the previous term to build the current term
        for i in range(1, length):
            if previous_term[i] == previous_term[i - 1]:
                count += 1  # Increment count if the same digit is found
            else:
                # Append the count and the digit to the result
                result.append(str(count))
                result.append(previous_term[i - 1])
                count = 1  # Reset count for the new digit
        
        # Append the last counted digit after the loop
        result.append(str(count))
        result.append(previous_term[-1])
        
        return ''.join(result)  # Join the list into a final string

# Example usage:
solution = Solution()
print(solution.countAndSay(1))  # Output: "1"
print(solution.countAndSay(4))  # Output: "1211"
